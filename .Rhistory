NbStructinPC = apply(matrice[1:26,],2,sum)
sort(NbStructinPC)
hist(NbStructinPC,xlab = matriceStruct[1,])
barplot(NbStructinPC, las = 2, cex.names  = 0.6)
mean(matriceStruct[1,])
sd(matriceStruct[1,])
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
##version courte
NbStructinPC = apply(matrice,2,sum)
ind.PR2 = names(which(type == "PR2"))
NbStructinPC.PR2 = apply(matrice[ind.PR2,],2,sum)
ind.PR1 = names(which(type == "PR1"))
NbStructinPC.PR1 = apply(matrice[ind.PR1,],2,sum)
matriceStruct = rbind(NbStructinPC,NbStructinPC.PR1,NbStructinPC.PR2)
matriceStruct
###version un peu longue
for (i in 1:length(NbResidues)){
y = 0
for (j in 1:length(Proteases[1:26])) {
if ((matrice[j,i] == 1) && (type[rownames(matrice)[j]] == "PR1")){
y = y+1
}
matriceStruct[2,i] = y
}
}
matriceStruct
hist(NbStructinPC.PR1,xlab = matriceStruct[1,])
barplot(NbStructinPC.PR1, las = 2, cex.names  = 0.6)
mean(matriceStruct["NbStructinPC.PR1",])
sd(matriceStruct["NbStructinPC.PR1",])
for (i in 1:length(NbResidues)){
y = 0
for (j in 1:length(Proteases[1:26])) {
if ((matrice[j,i] == 1) && (type[rownames(matrice)[j]] == "PR2")){
y = y+1
}
matriceStruct[3,i] = y
}
}
matriceStruct
hist(NbStructinPC.PR2,xlab = "")
barplot(NbStructinPC.PR2, las = 2, cex.names  = 0.6)
mean(matriceStruct["NbStructinPC.PR2",])
sd(matriceStruct["NbStructinPC.PR2",])
plot(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",], pch = 19,
xlab="nombre de structures de PR1",
ylab="nombre de structures de PR2")
text(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",],
colnames(matriceStruct), pos=3, offset=0.3, cex=0.5 )
cor(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",])
list.bk = c("C","O","N","CA")
Localisation = c("Backbone","ChaineLat")
NbAtomeinPC = 1:6039  ##Il faudrait automatiser ces valeurs
matrice3 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3) <- Localisation
colnames(matrice3) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
listAtomSyn2 = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3[1,sort.res[j]] = matrice3[1,sort.res[j]] + 1
}else{
matrice3[2,sort.res[j]] = matrice3[2,sort.res[j]] + 1
}
}
}
}
matrice3
pheatmap(matrice3, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 100, 250), col = c("white", "wheat", "yellow", "orange", "red"))
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
##Il faudrait automatiser ces valeurs
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
listAtomSyn2 = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[1,sort.res[j]] = 1
}
}
}
}
matriceBackBone
Localisation = c("Backbone","ChaineLat")
matrice3PR1 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR1) <- Localisation
colnames(matrice3PR1) <- sort.res
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp_packCryst.pdb","1hih_packCryst.pdb","1hii_packCryst.pdb","1hiv_packCryst.pdb","1hpv_packCryst.pdb","1hsh_packCryst.pdb","1hsi_packCryst.pdb","1ivp_packCryst.pdb","1sdt_packCryst.pdb","2hb3_packCryst.pdb","2hb4_packCryst.pdb","2hpe_packCryst.pdb","2hpf_packCryst.pdb","2ien_packCryst.pdb","2mip_packCryst.pdb","2nph_packCryst.pdb","2z4o_packCryst.pdb","3ebz_packCryst.pdb","3ec0_packCryst.pdb","3ecg_packCryst.pdb","3ekv_packCryst.pdb","3nu3_packCryst.pdb","3phv_packCryst.pdb","3s45_packCryst.pdb","4hla_packCryst.pdb","4ll3_packCryst.pdb")
ind.PR1 = names(which(type == "PR1"))
#ici je ne comprends pas pourquoi vous faites une double boucle
listAtomSyn = c()
listAtomSyn = NULL
listAtomSyn2 = NULL
for (j in NbProt) {
for (i in 1:length(ind.PR1)){
filein = listFile[j]
N = read.table(paste("fileByProt3",filein,sep="/"))
if((filein) == (ind.PR1[i])){
pp = c(pp, filein)
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
for (j in NbProt){
for (i in 1:length(ind.PR1)) {
filein = listFile[j]
if((filein) == (ind.PR1[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
NbAtomeinPC.1 = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.1)) {
if (sort.res[j] == listAtomSyn[k]){
if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
matrice3PR1[1,sort.res[j]] = matrice3PR1[1,sort.res[j]] + 1
}else{
matrice3PR1[2,sort.res[j]] = matrice3PR1[2,sort.res[j]] + 1
}
}
}
}
matrice3PR1
pheatmap(matrice3PR1, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 100, 150), col = c("white", "wheat", "yellow", "orange", "red"))
Localisation = c("Backbone","ChaineLat")
matrice3PR2 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR2) <- Localisation
colnames(matrice3PR2) <- sort.res
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp_packCryst.pdb","1hih_packCryst.pdb","1hii_packCryst.pdb","1hiv_packCryst.pdb","1hpv_packCryst.pdb","1hsh_packCryst.pdb","1hsi_packCryst.pdb","1ivp_packCryst.pdb","1sdt_packCryst.pdb","2hb3_packCryst.pdb","2hb4_packCryst.pdb","2hpe_packCryst.pdb","2hpf_packCryst.pdb","2ien_packCryst.pdb","2mip_packCryst.pdb","2nph_packCryst.pdb","2z4o_packCryst.pdb","3ebz_packCryst.pdb","3ec0_packCryst.pdb","3ecg_packCryst.pdb","3ekv_packCryst.pdb","3nu3_packCryst.pdb","3phv_packCryst.pdb","3s45_packCryst.pdb","4hla_packCryst.pdb","4ll3_packCryst.pdb")
ind.PR2 = names(which(type == "PR2"))
listAtomSyn2 = NULL
listAtomSyn = NULL
listAtomSyn = c()
for (j in NbProt) {
for (i in 1:length(ind.PR2)){
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
for (j in NbProt){
for (i in 1:length(ind.PR2)) {
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
NbAtomeinPC.2 = c(1:length(listAtomSyn2))
list.bk = c("C","CA","N","O")
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.2)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3PR2[1,sort.res[j]] = matrice3PR2[1,sort.res[j]] + 1
}else{
matrice3PR2[2,sort.res[j]] = matrice3PR2[2,sort.res[j]] + 1
}
}
}
}
matrice3PR2
matricetotale = matrice3PR1 + matrice3PR2
pheatmap(matrice3PR2, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 70, 100), col = c("white", "wheat", "yellow", "orange", "red"))
ResidueTotaux = c("1_A","2_A","3_A","4_A","5_A","6_A","7_A","8_A","9_A","10_A","11_A","12_A","13_A","14_A","15_A","16_A","17_A","18_A","19_A","20_A","21_A","22_A","23_A","24_A","25_A","26_A","27_A","28_A","29_A","30_A","31_A","32_A","33_A","34_A","35_A","36_A","37_A","38_A","39_A","40_A","41_A","42_A","43_A","44_A","45_A","46_A","47_A", "48_A", "49_A", "50_A", "51_A", "52_A", "53_A", "54_A", "55_A", "56_A", "57_A", "58_A", "59_A", "60_A", "61_A","62_A", "63_A","64_A", "65_A", "66_A", "67_A", "68_A","69_A", "70_A", "71_A", "72_A", "73_A", "74_A","75_A","76_A","77_A", "78_A", "79_A", "80_A", "81_A", "82_A", "83_A","84_A","85_A","86_A","87_A", "88_A", "89_A", "90_A", "91_A", "92_A", "93_A", "94_A", "95_A","96_A", "97_A", "98_A", "99_A", "1_B", "2_B", "3_B", "4_B","5_B","6_B","7_B","8_B","9_B","10_B", "11_B", "12_B", "13_B", "14_B","15_B", "16_B", "17_B", "18_B", "19_B","20_B","21_B","22_B","23_B","24_B","25_B","26_B","27_B","28_B", "29_B", "30_B" ,"31_B","32_B","33_B", "34_B", "35_B" ,"36_B", "37_B", "38_B", "39_B" ,"40_B", "41_B", "42_B", "43_B", "44_B", "45_B", "46_B", "47_B", "48_B", "49_B","50_B", "51_B", "52_B", "53_B", "54_B", "55_B", "56_B" ,"57_B", "58_B", "59_B", "60_B" ,"61_B", "62_B", "63_B","64_B", "65_B","66_B", "67_B" ,"68_B", "69_B", "70_B", "71_B","72_B", "73_B", "74_B","75_B", "76_B","77_B", "78_B", "79_B", "80_B", "81_B", "82_B", "83_B","84_B","85_B","86_B", "87_B", "88_B","89_B","90_B", "91_B", "92_B","93_B", "94_B", "95_B", "96_B","97_B", "98_B", "99_B")
Region1 = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer")
Region2 = c("dimer","R1","fulcrum","catalytic","R2","flapelbow","flaps","cantilever","R3","wall","R4","alphahelix","dimer","R1","fulcrum","catalytic","R2","flapelbow","flaps","cantilever","R3","wall","R4","alphahelix")
matrice3PR <- matrix(0, nrow=length(NbResidues), ncol=length(NbResidues))
rownames(matrice3PR) <- Proteases
ResidueTotaux = c("1_A","2_A","3_A","4_A","5_A","6_A","7_A","8_A","9_A","10_A","11_A","12_A","13_A","14_A","15_A","16_A","17_A","18_A","19_A","20_A","21_A","22_A","23_A","24_A","25_A","26_A","27_A","28_A","29_A","30_A","31_A","32_A","33_A","34_A","35_A","36_A","37_A","38_A","39_A","40_A","41_A","42_A","43_A","44_A","45_A","46_A","47_A", "48_A", "49_A", "50_A", "51_A", "52_A", "53_A", "54_A", "55_A", "56_A", "57_A", "58_A", "59_A", "60_A", "61_A","62_A", "63_A","64_A", "65_A", "66_A", "67_A", "68_A","69_A", "70_A", "71_A", "72_A", "73_A", "74_A","75_A","76_A","77_A", "78_A", "79_A", "80_A", "81_A", "82_A", "83_A","84_A","85_A","86_A","87_A", "88_A", "89_A", "90_A", "91_A", "92_A", "93_A", "94_A", "95_A","96_A", "97_A", "98_A", "99_A", "1_B", "2_B", "3_B", "4_B","5_B","6_B","7_B","8_B","9_B","10_B", "11_B", "12_B", "13_B", "14_B","15_B", "16_B", "17_B", "18_B", "19_B","20_B","21_B","22_B","23_B","24_B","25_B","26_B","27_B","28_B", "29_B", "30_B" ,"31_B","32_B","33_B", "34_B", "35_B" ,"36_B", "37_B", "38_B", "39_B" ,"40_B", "41_B", "42_B", "43_B", "44_B", "45_B", "46_B", "47_B", "48_B", "49_B","50_B", "51_B", "52_B", "53_B", "54_B", "55_B", "56_B" ,"57_B", "58_B", "59_B", "60_B" ,"61_B", "62_B", "63_B","64_B", "65_B","66_B", "67_B" ,"68_B", "69_B", "70_B", "71_B","72_B", "73_B", "74_B","75_B", "76_B","77_B", "78_B", "79_B", "80_B", "81_B", "82_B", "83_B","84_B","85_B","86_B", "87_B", "88_B","89_B","90_B", "91_B", "92_B","93_B", "94_B", "95_B", "96_B","97_B", "98_B", "99_B")
Region1 = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer")
Region2 = c("dimer","R1","fulcrum","catalytic","R2","flapelbow","flaps","cantilever","R3","wall","R4","alphahelix","dimer","R1","fulcrum","catalytic","R2","flapelbow","flaps","cantilever","R3","wall","R4","alphahelix")
matrice3PR <- matrix(0, nrow=length(Proteases), ncol=length(Region2))
rownames(matrice3PR) <- Proteases
colnames(matrice3PR) <- Region2
listAtomSyn = c()
for (j in NbProt) {
for (i in 1:length(ind.PR2)){
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
listAtomSyn2 = c()
for (j in NbProt){
for (i in 1:length(ind.PR2)) {
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
list.bk = c("C","CA","N","O")
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(Region2)) {
for (k in 1:length(NbAtomeinPC.2)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3PR2[1,sort.res[j]] = matrice3PR2[1,sort.res[j]] + 1
}
}
}
}
matrice3PR
ResidueTotaux = c("1_A","2_A","3_A","4_A","5_A","6_A","7_A","8_A","9_A","10_A","11_A","12_A","13_A","14_A","15_A","16_A","17_A","18_A","19_A","20_A","21_A","22_A","23_A","24_A","25_A","26_A","27_A","28_A","29_A","30_A","31_A","32_A","33_A","34_A","35_A","36_A","37_A","38_A","39_A","40_A","41_A","42_A","43_A","44_A","45_A","46_A","47_A", "48_A", "49_A", "50_A", "51_A", "52_A", "53_A", "54_A", "55_A", "56_A", "57_A", "58_A", "59_A", "60_A", "61_A","62_A", "63_A","64_A", "65_A", "66_A", "67_A", "68_A","69_A", "70_A", "71_A", "72_A", "73_A", "74_A","75_A","76_A","77_A", "78_A", "79_A", "80_A", "81_A", "82_A", "83_A","84_A","85_A","86_A","87_A", "88_A", "89_A", "90_A", "91_A", "92_A", "93_A", "94_A", "95_A","96_A", "97_A", "98_A", "99_A", "1_B", "2_B", "3_B", "4_B","5_B","6_B","7_B","8_B","9_B","10_B", "11_B", "12_B", "13_B", "14_B","15_B", "16_B", "17_B", "18_B", "19_B","20_B","21_B","22_B","23_B","24_B","25_B","26_B","27_B","28_B", "29_B", "30_B" ,"31_B","32_B","33_B", "34_B", "35_B" ,"36_B", "37_B", "38_B", "39_B" ,"40_B", "41_B", "42_B", "43_B", "44_B", "45_B", "46_B", "47_B", "48_B", "49_B","50_B", "51_B", "52_B", "53_B", "54_B", "55_B", "56_B" ,"57_B", "58_B", "59_B", "60_B" ,"61_B", "62_B", "63_B","64_B", "65_B","66_B", "67_B" ,"68_B", "69_B", "70_B", "71_B","72_B", "73_B", "74_B","75_B", "76_B","77_B", "78_B", "79_B", "80_B", "81_B", "82_B", "83_B","84_B","85_B","86_B", "87_B", "88_B","89_B","90_B", "91_B", "92_B","93_B", "94_B", "95_B", "96_B","97_B", "98_B", "99_B")
names (ResidueTotaux) = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer")
Region2 = c("dimer","R1","fulcrum","catalytic","R2","flapelbow","flaps","cantilever","R3","wall","R4","alphahelix","dimer","R1","fulcrum","catalytic","R2","flapelbow","flaps","cantilever","R3","wall","R4","alphahelix")
matrice3PR <- matrix(0, nrow=length(Proteases), ncol=length(Region2))
rownames(matrice3PR) <- Proteases
colnames(matrice3PR) <- Region2
listAtomSyn = c()
for (j in NbProt) {
for (i in 1:length(ind.PR2)){
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
listAtomSyn2 = c()
for (j in NbProt){
for (i in 1:length(ind.PR2)) {
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
list.bk = c("C","CA","N","O")
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(Region2)) {
for (k in 1:length(NbAtomeinPC.2)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3PR2[1,sort.res[j]] = matrice3PR2[1,sort.res[j]] + 1
}
}
}
}
matrice3PR
matrice3PR
sort.res
"1_A"  "2_A"  "3_A"  "4_A"  "5_A"  "6_A"  "7_A"  "8_A"  "9_A"  "10_A" "11_A" "12_A" "14_A"
names (sort.res) = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","wall","wall","wall","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","wall","wall","wall","wall","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer")
test = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","wall","wall","wall","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","wall","wall","wall","wall","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer")
test
test = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","wall","wall","wall","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","wall","wall","wall","wall","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer")
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
listAtomSyn2 = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[1,sort.res[j]] = 1
}
}
}
}
matriceBackBone
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
listAtomSyn2 = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
for (i in 1:length(Proteases)) {
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
Atome <- unique(c(paste(as.character(N[,6]), as.character(N[,5]), sep="_")))
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
NbAtomeinPC = c(1:length(listAtomSyn2))
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
Atome <- unique(c(paste(as.character(N[,6]), as.character(N[,5]), sep="_")))
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
Atome <- unique(c(paste(as.character(N[,6]), as.character(N[,5]), sep="_")))
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
Atome <- unique(c(paste(as.character(N[,6]), as.character(N[,5]), sep="_")))
for (j in 1:length(sort.res)) {
for (k in 1:length(listAtomSyn)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
