N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
Atome <- unique(c(paste(as.character(N[,6]), as.character(N[,5]), sep="_")))
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
Atome <- unique(c(paste(as.character(N[,6]), as.character(N[,5]), sep="_")))
for (j in 1:length(sort.res)) {
for (k in 1:length(listAtomSyn)) {
if (sort.res[j] == listAtomSyn[k]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
library(knitr)
#library(kableExtra)
# library(formattable)
options(width = 300)
# options(encoding = 'UTF-8')
knitr::opts_chunk$set(
fig.width = 7, fig.height = 5,
fig.path = 'figures/07_tests_multiples',
fig.align = "center",
size = "tiny",
echo = TRUE, eval = TRUE,
warning = FALSE, message = FALSE,
results = TRUE, comment = "")
options(scipen = 12) ## Max number of digits for non-scientific notation
# knitr::asis_output("\\footnotesize")
listFile = dir("fileByProt3/")
filein = listFile[1]
M = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = unique(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
listAtomSyn = listAtom
listAtomSyn
NbProt =(1:26)
NbResidues =(1:159)
for (i in NbProt){
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = unique(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
listAtomSyn = unique(c(listAtom,listAtomSyn))
}
listAtomSyn
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matrice <- matrix(0, nrow=length(Proteases), ncol=length(listAtomSyn))
rownames(matrice) <- Proteases
colnames(matrice) <- listAtomSyn
for (i in 1:length(NbProt)) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- unique(c(paste(as.character(M[,6]), as.character(M[,5]), sep="_")))
for (j in 1:length(NbResidues)) {
for (y in 1:length(Atome)) {
if ((listAtomSyn[j]) == (Atome[y])){
matrice[i,j] = 1
}
}
}
}
residue = colnames(matrice)
resA = residue[grep("_A", residue)]
resA_ssA = as.numeric(gsub("_A","", resA))
names(resA_ssA) = resA
sort.resA = names(sort(resA_ssA))
resB = residue[grep("_B", residue)]
resB_ssB = as.numeric(gsub("_B","", resB))
names(resB_ssB) = resB
sort.resB = names(sort(resB_ssB))
sort.res = c(sort.resA, sort.resB)
matrice.sort = matrice[,sort.res]
matrice  = matrice.sort
matrice
library(pheatmap)
?pheatmap
pheatmap::pheatmap(matrice)
pheatmap(matrice[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
StructinPC = c("NbStructinPC","NbStructinPC.PR1","NbStructinPC.PR2")
matriceStruct <- matrix(0, nrow=length(StructinPC), ncol=length(listAtomSyn))
rownames(matriceStruct) <- StructinPC
colnames(matriceStruct) <- sort.res
for (i in 1:length(NbResidues)){
y = 0
for (j in 1:length(Proteases[1:26])) {
if (matrice[j,i] == 1){
y = y+1
matriceStruct[1,i] = y
}
}
}
matriceStruct
type = matrice[,ncol(matrice)]
names(type)
#matrice[names(which(type=="PR2")),]
matrice2 = matrice[,-ncol(matrice)]
NbStructinPC = apply(matrice[1:26,],2,sum)
sort(NbStructinPC)
hist(NbStructinPC,xlab = matriceStruct[1,])
barplot(NbStructinPC, las = 2, cex.names  = 0.6)
mean(matriceStruct[1,])
sd(matriceStruct[1,])
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
##version courte
NbStructinPC = apply(matrice,2,sum)
ind.PR2 = names(which(type == "PR2"))
NbStructinPC.PR2 = apply(matrice[ind.PR2,],2,sum)
ind.PR1 = names(which(type == "PR1"))
NbStructinPC.PR1 = apply(matrice[ind.PR1,],2,sum)
matriceStruct = rbind(NbStructinPC,NbStructinPC.PR1,NbStructinPC.PR2)
matriceStruct
###version un peu longue
for (i in 1:length(NbResidues)){
y = 0
for (j in 1:length(Proteases[1:26])) {
if ((matrice[j,i] == 1) && (type[rownames(matrice)[j]] == "PR1")){
y = y+1
}
matriceStruct[2,i] = y
}
}
matriceStruct
hist(NbStructinPC.PR1,xlab = matriceStruct[1,])
barplot(NbStructinPC.PR1, las = 2, cex.names  = 0.6)
mean(matriceStruct["NbStructinPC.PR1",])
sd(matriceStruct["NbStructinPC.PR1",])
for (i in 1:length(NbResidues)){
y = 0
for (j in 1:length(Proteases[1:26])) {
if ((matrice[j,i] == 1) && (type[rownames(matrice)[j]] == "PR2")){
y = y+1
}
matriceStruct[3,i] = y
}
}
matriceStruct
hist(NbStructinPC.PR2,xlab = "")
barplot(NbStructinPC.PR2, las = 2, cex.names  = 0.6)
mean(matriceStruct["NbStructinPC.PR2",])
sd(matriceStruct["NbStructinPC.PR2",])
plot(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",], pch = 19,
xlab="nombre de structures de PR1",
ylab="nombre de structures de PR2")
text(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",],
colnames(matriceStruct), pos=3, offset=0.3, cex=0.5 )
cor(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",])
list.bk = c("C","O","N","CA")
Localisation = c("Backbone","ChaineLat")
NbAtomeinPC = 1:6039  ##Il faudrait automatiser ces valeurs
matrice3 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3) <- Localisation
colnames(matrice3) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
listAtomSyn2 = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3[1,sort.res[j]] = matrice3[1,sort.res[j]] + 1
}else{
matrice3[2,sort.res[j]] = matrice3[2,sort.res[j]] + 1
}
}
}
}
matrice3
pheatmap(matrice3, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 100, 250), col = c("white", "wheat", "yellow", "orange", "red"))
Localisation = c("Backbone","ChaineLat")
matrice3PR1 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR1) <- Localisation
colnames(matrice3PR1) <- sort.res
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp_packCryst.pdb","1hih_packCryst.pdb","1hii_packCryst.pdb","1hiv_packCryst.pdb","1hpv_packCryst.pdb","1hsh_packCryst.pdb","1hsi_packCryst.pdb","1ivp_packCryst.pdb","1sdt_packCryst.pdb","2hb3_packCryst.pdb","2hb4_packCryst.pdb","2hpe_packCryst.pdb","2hpf_packCryst.pdb","2ien_packCryst.pdb","2mip_packCryst.pdb","2nph_packCryst.pdb","2z4o_packCryst.pdb","3ebz_packCryst.pdb","3ec0_packCryst.pdb","3ecg_packCryst.pdb","3ekv_packCryst.pdb","3nu3_packCryst.pdb","3phv_packCryst.pdb","3s45_packCryst.pdb","4hla_packCryst.pdb","4ll3_packCryst.pdb")
ind.PR1 = names(which(type == "PR1"))
#ici je ne comprends pas pourquoi vous faites une double boucle
listAtomSyn = c()
listAtomSyn = NULL
listAtomSyn2 = NULL
for (j in NbProt) {
for (i in 1:length(ind.PR1)){
filein = listFile[j]
N = read.table(paste("fileByProt3",filein,sep="/"))
if((filein) == (ind.PR1[i])){
pp = c(pp, filein)
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
Localisation = c("Backbone","ChaineLat")
matrice3PR1 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR1) <- Localisation
colnames(matrice3PR1) <- sort.res
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp_packCryst.pdb","1hih_packCryst.pdb","1hii_packCryst.pdb","1hiv_packCryst.pdb","1hpv_packCryst.pdb","1hsh_packCryst.pdb","1hsi_packCryst.pdb","1ivp_packCryst.pdb","1sdt_packCryst.pdb","2hb3_packCryst.pdb","2hb4_packCryst.pdb","2hpe_packCryst.pdb","2hpf_packCryst.pdb","2ien_packCryst.pdb","2mip_packCryst.pdb","2nph_packCryst.pdb","2z4o_packCryst.pdb","3ebz_packCryst.pdb","3ec0_packCryst.pdb","3ecg_packCryst.pdb","3ekv_packCryst.pdb","3nu3_packCryst.pdb","3phv_packCryst.pdb","3s45_packCryst.pdb","4hla_packCryst.pdb","4ll3_packCryst.pdb")
ind.PR1 = names(which(type == "PR1"))
#ici je ne comprends pas pourquoi vous faites une double boucle
listAtomSyn = c()
listAtomSyn = NULL
listAtomSyn2 = NULL
for (j in NbProt) {
for (i in 1:length(ind.PR1)){
filein = listFile[j]
N = read.table(paste("fileByProt3",filein,sep="/"))
if((filein) == (ind.PR1[i])){
pp = c(pp, filein)
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
for (j in NbProt){
for (i in 1:length(ind.PR1)) {
filein = listFile[j]
if((filein) == (ind.PR1[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
NbAtomeinPC.1 = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.1)) {
if (sort.res[j] == listAtomSyn[k]){
if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
matrice3PR1[1,sort.res[j]] = matrice3PR1[1,sort.res[j]] + 1
}else{
matrice3PR1[2,sort.res[j]] = matrice3PR1[2,sort.res[j]] + 1
}
}
}
}
Localisation = c("Backbone","ChaineLat")
matrice3PR2 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR2) <- Localisation
colnames(matrice3PR2) <- sort.res
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) =c("1hhp_packCryst.pdb","1hih_packCryst.pdb","1hii_packCryst.pdb","1hiv_packCryst.pdb","1hpv_packCryst.pdb","1hsh_packCryst.pdb","1hsi_packCryst.pdb","1ivp_packCryst.pdb","1sdt_packCryst.pdb","2hb3_packCryst.pdb","2hb4_packCryst.pdb","2hpe_packCryst.pdb","2hpf_packCryst.pdb","2ien_packCryst.pdb","2mip_packCryst.pdb","2nph_packCryst.pdb","2z4o_packCryst.pdb","3ebz_packCryst.pdb","3ec0_packCryst.pdb","3ecg_packCryst.pdb","3ekv_packCryst.pdb","3nu3_packCryst.pdb","3phv_packCryst.pdb","3s45_packCryst.pdb","4hla_packCryst.pdb","4ll3_packCryst.pdb")
ind.PR2 = names(which(type == "PR2"))
listAtomSyn2 = NULL
listAtomSyn = NULL
listAtomSyn = c()
for (j in NbProt) {
for (i in 1:length(ind.PR2)){
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
for (j in NbProt){
for (i in 1:length(ind.PR2)) {
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
NbAtomeinPC.2 = c(1:length(listAtomSyn2))
list.bk = c("C","CA","N","O")
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.2)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3PR2[1,sort.res[j]] = matrice3PR2[1,sort.res[j]] + 1
}else{
matrice3PR2[2,sort.res[j]] = matrice3PR2[2,sort.res[j]] + 1
}
}
}
}
matrice3PR2
matricetotale = matrice3PR1 + matrice3PR2
pheatmap(matrice3PR2, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 70, 100), col = c("white", "wheat", "yellow", "orange", "red"))
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtomSyn = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn2 = (paste(as.character(N[,3])))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
"1_A"  "2_A"  "3_A"  "4_A"  "5_A"       5
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
matriceChaineLat <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtomSyn = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn2 = (paste(as.character(N[,3])))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}else{
matriceChaineLat[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
list.bk = c("C","O","N","CA")
Proteases = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3")
matriceBackBone <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBone) <- Proteases
colnames(matriceBackBone) <- sort.res
matriceChaineLat <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceChaineLat) <- Proteases
colnames(matriceChaineLat) <- sort.res
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtomSyn = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn2 = (paste(as.character(N[,3])))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBone[Proteases[i],sort.res[j]] = 1
}else{
matriceChaineLat[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
matriceBackBone
matriceChaineLat
Region1 = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer")
matrice3PR2 <- matrix(0, nrow=length(NbResidues), ncol=length(NbResidues))
rownames(matrice3PR2) <- Proteases
colnames(matrice3PR2) <- sort.res
Region1 = c("dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","dimer","R1","R1","R1","R1","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","fulcrum","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","catalytic","R2","R2","R2","R2","R2","R2","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flapelbow","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","flaps","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","cantilever","R3","R3","R3","R3","wall","wall","wall","wall","R4","R4","R4","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","alphahelix","dimer","dimer","dimer","dimer")
matrice3PR2 <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matrice3PR2) <- Proteases
colnames(matrice3PR2) <- sort.res
listAtomSyn = c()
for (j in NbProt) {
for (i in 1:length(ind.PR2)){
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
listAtomSyn2 = c()
for (j in NbProt){
for (i in 1:length(ind.PR2)) {
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
list.bk = c("C","CA","N","O")
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.2)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3PR2[1,sort.res[j]] = matrice3PR2[1,sort.res[j]] + 1
}else{
matrice3PR2[2,sort.res[j]] = matrice3PR2[2,sort.res[j]] + 1
}
}
}
}
matrice3PR2
Proteases
ProtPR1 = c("1hhp","1hih","1hiv","1hpv","1sdt" "2hb3","2hb4","2ien","2nph","2z4o","3ekv","3nu3","3phv","4hla","4ll3")
ProtPR1 = c("1hhp","1hih","1hiv","1hpv","1sdt", "2hb3","2hb4","2ien","2nph","2z4o","3ekv","3nu3","3phv","4hla","4ll3")
ProtPR2 = c("1hii","1hsh","1hsi","1ivp","2hpe","2hpf","2mip","3ebz","3ec0","3ecg","3s45")
