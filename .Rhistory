resSelA = resSelB = resSel_B2_PR2 = resSel_A2_PR2 = resSel_A_PR2 = resSel_B_PR2 = NULL
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) = Proteases
ProtPR2 <- names(which(type=="PR2"))
for (i in ProtPR2) {
for (j in listAtomSyn) {
if (matrice[i,j] == 1){
for (k in 1:length(resA)) {
if(j == resA[k]){
resSelA = c(gsub("_A", "", j))
resSel_A_PR2 = paste(resSelA, collapse="+")
resSel_A2_PR2 = unique(c(resSel_A2_PR2,resSel_A_PR2))
}
}
for (g in 1:length(resB)) {
if(j == resB[g]){
resSelB = c(gsub("_B", "", j))
resSel_B_PR2 = paste(resSelB, collapse="+")
resSel_B2_PR2 = unique(c(resSel_B2_PR2,resSel_B_PR2))
}
}
}
}
}
resSel_B2_PR2 = paste(resSel_B2_PR2, collapse="+")
resSel_A2_PR2 = paste(resSel_A2_PR2, collapse="+")
paste("select respackA, resid ", resSel_A2_PR2,  " and chain A", sep="")
paste("select respackB, resid ", resSel_B2_PR2,  " and chain B", sep="")
list.bk = c("C","O","N","CA")
Localisation = c("Backbone","ChaineLat")
NbAtomeinPC = 1:6039  ##Il faudrait automatiser ces valeurs
matrice3 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3) <- Localisation
colnames(matrice3) <- sort.res
listAtomSyn = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
listAtomSyn2 = c()
for (i in NbProt){
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3[1,sort.res[j]] = matrice3[1,sort.res[j]] + 1
}else{
matrice3[2,sort.res[j]] = matrice3[2,sort.res[j]] + 1
}
}
}
}
apply(matrice3, 1, mean)
t.test(matrice3[1,],matrice3[2,], var.equal=TRUE, alternative="less")
plot(matrice3[1,],matrice3[2,], xlab="nbr d'atomes du backbone impliqués dans le packing par résidu",
ylab="nbr d'atomes des chaines latérales impliqués dans le packing par résidu", pch=19)
pheatmap(matrice3, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 100, 250),
col = c("white", "wheat", "yellow", "orange", "red"))
matriceBackBonePR <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceBackBonePR) <- Proteases
colnames(matriceBackBonePR) <- sort.res
matriceChaineLatPR <- matrix(0, nrow=length(Proteases), ncol=length(NbResidues))
rownames(matriceChaineLatPR) <- Proteases
colnames(matriceChaineLatPR) <- sort.res
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(Proteases)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = listFile[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtomSyn = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn2 = (paste(as.character(N[,3])))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBonePR[Proteases[i],sort.res[j]] = 1
}else{
matriceChaineLatPR[Proteases[i],sort.res[j]] = 1
}
}
}
}
}
pheatmap(matriceBackBonePR[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1,
col=c("white", "red"), clustering_distance_rows = "binary")
pheatmap(matriceChaineLatPR[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1,
col=c("white", "red"), clustering_distance_rows = "binary")
StructinPC = c("NbStructinPC","NbStructinPC.PR1","NbStructinPC.PR2")
matriceStruct <- matrix(0, nrow=length(StructinPC), ncol=length(sort.res))
rownames(matriceStruct) <- StructinPC
colnames(matriceStruct) <- sort.res
for (i in 1:length(NbResidues)){
y = 0
for (j in 1:length(Proteases[1:26])) {
if (matrice[j,i] == 1){
y = y+1
matriceStruct[1,i] = y
}
}
}
type = matrice[,ncol(matrice)]
names(type)
#matrice[names(which(type=="PR2")),]
matrice2 = matrice[,-ncol(matrice)]
NbStructinPC = apply(matrice[1:26,],2,sum)
hist(NbStructinPC,xlab="Nbr de structures ayant un résidu donné impliqué dans le packing")
barplot(NbStructinPC, las = 2, cex.names  = 0.6, xlab="residus", ylab="Nbr de structures ayant un résidu donné impliqué dans le packing")
abline(h=c(19,17))
mean(matriceStruct[1,])
sd(matriceStruct[1,])
f.permut = function(vect){
return(sample(vect))
}
occ <- apply(matrice,2,sum)
resA <- colnames(matrice)[grep("_A", colnames(matrice))]
resB<- colnames(matrice)[grep("_B", colnames(matrice))]
nbrSimul <- 1000
occ.SupbyPos <- rep(0, length = ncol(matrice))
names(occ.SupbyPos) <- colnames(matrice)
for( rep in 1:nbrSimul){
mat.rand.A <- t(apply(matrice[,resA],1,f.permut))
mat.rand.B <- t(apply(matrice[,resB],1,f.permut))
matrice.random <- cbind(mat.rand.A, mat.rand.B)
colnames(matrice.random) <- c(resA,resB)
occ.rand <- apply(matrice.random,2,sum)
diff <- occ.rand-occ
occ.SupbyPos [names(which(diff > 0))] = occ.SupbyPos[names(which(diff > 0))] +1
}
pval <- occ.SupbyPos/nbrSimul
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) = Proteases
ProtPR1 <- names(which(type=="PR1"))
MatricePR1 <- matrice[ProtPR1,]
svg("figures/heatmap_PR1_packPres.svg")
pheatmap(MatricePR1, cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1,
col=c("white", "red"), clustering_distance_rows = "binary")
dev.off()
nbrSimul <- 10000
f.computPval <- function(MatricePR1, nbrSimul){
occ.PR1 <- apply(MatricePR1,2,sum)
resA <- colnames(MatricePR1)[grep("_A", colnames(MatricePR1))]
resB <- colnames(MatricePR1)[grep("_B", colnames(MatricePR1))]
occ.SupbyPos.PR1 <- rep(0, length = ncol(MatricePR1))
names(occ.SupbyPos.PR1) <- colnames(MatricePR1)
for( rep in 1:nbrSimul){
mat.rand.A <- t(apply(MatricePR1[,resA],1,f.permut))
mat.rand.B <- t(apply(MatricePR1[,resB],1,f.permut))
matrice.random <- cbind(mat.rand.A, mat.rand.B)
colnames(matrice.random) <- c(resA,resB)
occ.rand <- apply(matrice.random,2,sum)
diff <- occ.rand-occ.PR1
occ.SupbyPos.PR1 [names(which(diff > 0))] = occ.SupbyPos.PR1[names(which(diff > 0))] +1
}
pval.PR1 <- occ.SupbyPos.PR1/nbrSimul
return(pval.PR1)
}
pval.PR1 <- f.computPval(MatricePR1, nbrSimul=20000)
length(which(pval.PR1 < 0.05/ncol(MatricePR1)))
res.conserv.PR1 <- names(which(pval.PR1 < 0.05))
occ.PR1 <- apply(MatricePR1,2,sum)
occ.PR1[res.conserv.PR1]
resA.1 <- intersect(res.conserv.PR1, colnames(MatricePR1)[grep("_A", colnames(MatricePR1))])
resB.1 <- intersect(res.conserv.PR1, colnames(MatricePR1)[grep("_B", colnames(MatricePR1))])
pourc.PR1 <- round(c(occ.PR1[resA.1] / nrow(MatricePR1),
occ.PR1[resB.1] / (nrow(MatricePR1)-3))*100,2)
barplot(pourc.PR1, las=2, ylab="% de structures avec le res dans packing")
resSel_A_PR1 <- gsub("_A", "", colnames(matrice)[grep("_A", colnames(matrice))])
resSel2_A_PR1 <- paste(resSel_A_PR1, collapse="+")
paste("select respackA, resid ", resSel2_A_PR1,  " and chain A", sep="")
#type[rownames(matrice)[j]] == "PR1"
count.allPR <- apply(matrice, 2, sum)
hist(count.allPR)
dim(matrice)
##version courte
NbStructinPC = apply(matrice,2,sum)
ind.PR1 = names(which(type == "PR1"))
NbStructinPC.PR1 = apply(matrice[ind.PR1,],2,sum)
matriceStruct = rbind(NbStructinPC,NbStructinPC.PR1)
matriceStruct
hist(NbStructinPC.PR1, xlab = matriceStruct[1,])
barplot(NbStructinPC.PR1, las = 2, cex.names  = 0.6)
svg("figures/occ_pos_PR1.svg",  width = 12)
barplot(NbStructinPC.PR1/nrow(matrice[ind.PR1,])*100, las = 2, cex.names  = 0.6)
dev.off()
mean(matriceStruct["NbStructinPC.PR1",])
sd(matriceStruct["NbStructinPC.PR1",])
Localisation = c("Backbone","ChaineLat")
matrice3PR1 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR1) <- Localisation
colnames(matrice3PR1) <- sort.res
type.file = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type.file ) =c("1hhp_packCryst.pdb","1hih_packCryst.pdb","1hii_packCryst.pdb","1hiv_packCryst.pdb","1hpv_packCryst.pdb","1hsh_packCryst.pdb","1hsi_packCryst.pdb","1ivp_packCryst.pdb","1sdt_packCryst.pdb","2hb3_packCryst.pdb","2hb4_packCryst.pdb","2hpe_packCryst.pdb","2hpf_packCryst.pdb","2ien_packCryst.pdb","2mip_packCryst.pdb","2nph_packCryst.pdb","2z4o_packCryst.pdb","3ebz_packCryst.pdb","3ec0_packCryst.pdb","3ecg_packCryst.pdb","3ekv_packCryst.pdb","3nu3_packCryst.pdb","3phv_packCryst.pdb","3s45_packCryst.pdb","4hla_packCryst.pdb","4ll3_packCryst.pdb")
ind.PR1 = names(which(type.file == "PR1"))
#ici je ne comprends pas pourquoi vous faites une double boucle
listAtomSyn = c()
listAtomSyn = NULL
listAtomSyn2 = NULL
pp =NULL
for (j in NbProt) {
for (i in 1:length(ind.PR1)){
filein = listFile[j]
N = read.table(paste("fileByProt3",filein,sep="/"))
if((filein) == (ind.PR1[i])){
pp = c(pp, filein)
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
for (j in NbProt){
for (i in 1:length(ind.PR1)) {
filein = listFile[j]
if((filein) == (ind.PR1[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
NbAtomeinPC.1 = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.1)) {
if (sort.res[j] == listAtomSyn[k]){
if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
matrice3PR1[1,sort.res[j]] = matrice3PR1[1,sort.res[j]] + 1
}else{
matrice3PR1[2,sort.res[j]] = matrice3PR1[2,sort.res[j]] + 1
}
}
}
}
svg("figures/pheatmap_PR1_SCBB.svg",  width = 12)
pheatmap(matrice3PR1, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 100, 150), col = c("white", "wheat", "yellow", "orange", "red"))
dev.off()
ProtPR1 = c("1hhp","1hih","1hiv","1hpv","1sdt", "2hb3","2hb4","2ien","2nph","2z4o","3ekv","3nu3","3phv","4hla","4ll3")
list.bk = c("C","O","N","CA")
matriceBackBonePR1 <- matrix(0, nrow=length(ProtPR1), ncol=length(NbResidues))
rownames(matriceBackBonePR1) <- ProtPR1
colnames(matriceBackBonePR1) <- sort.res
matriceChaineLatPR1 <- matrix(0, nrow=length(ProtPR1), ncol=length(NbResidues))
rownames(matriceChaineLatPR1) <- ProtPR1
colnames(matriceChaineLatPR1) <- sort.res
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(ind.PR1)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = ind.PR1[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtomSyn = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn2 = (paste(as.character(N[,3])))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBonePR1[ProtPR1[i],sort.res[j]] = 1
}else{
matriceChaineLatPR1[ProtPR1[i],sort.res[j]] = 1
}
}
}
}
}
pheatmap(matriceBackBonePR1[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matriceChaineLatPR1[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
type = c("PR1","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR2","PR1","PR2","PR1","PR1","PR2","PR2","PR2","PR1","PR1","PR1","PR2","PR1","PR1")
names(type) = Proteases
ProtPR2 = names(which(type=="PR2"))
MatricePR2 <- matrice[ProtPR2,]
svg("figures/heatmap_PR2_packPres.svg")
pheatmap(MatricePR2, cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1,
col=c("white", "red"), clustering_distance_rows = "binary")
dev.off()
pval.PR2 <- f.computPval(MatricePR2, nbrSimul=20000)
res.conserv.PR2 <- names(which(pval.PR2 < 0.05))
occ.PR2 <- apply(MatricePR2,2,sum)
occ.PR2[res.conserv.PR2]
pourc.PR2 <- round(occ.PR2[res.conserv.PR2] / nrow(MatricePR2)*100,2)
barplot(pourc.PR2, las=2, ylab="% de structures avec le res dans packing")
ind.PR2 = names(which(type == "PR2"))
NbStructinPC.PR2 = apply(matrice[ind.PR2,],2,sum)
matriceStruct = rbind(matriceStruct,NbStructinPC.PR2)
hist(NbStructinPC.PR2,xlab = "")
barplot(NbStructinPC.PR2, las = 2, cex.names  = 0.6)
svg("figures/occ_pos_PR2.svg",  width = 12)
barplot(NbStructinPC.PR2/nrow(matrice[ind.PR2,])*100, las = 2, cex.names  = 0.6)
dev.off()
mean(matriceStruct["NbStructinPC.PR2",])
sd(matriceStruct["NbStructinPC.PR2",])
Localisation = c("Backbone","ChaineLat")
matrice3PR2 <- matrix(0, nrow=length(Localisation), ncol=length(NbResidues))
rownames(matrice3PR2) <- Localisation
colnames(matrice3PR2) <- sort.res
ind.PR2 = names(which(type.file == "PR2"))
listAtomSyn2 = NULL
listAtomSyn = NULL
listAtomSyn = c()
for (j in NbProt) {
for (i in 1:length(ind.PR2)){
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn = (c(listAtom,listAtomSyn))
}
}
}
for (j in NbProt){
for (i in 1:length(ind.PR2)) {
filein = listFile[j]
if((filein) == (ind.PR2[i])){
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = (paste(as.character(N[,3])))
listAtomSyn2 = (c(listAtom,listAtomSyn2))
}
}
}
NbAtomeinPC.2 = c(1:length(listAtomSyn2))
list.bk = c("C","CA","N","O")
names(listAtomSyn) = listAtomSyn2
for (j in 1:length(sort.res)) {
for (k in 1:length(NbAtomeinPC.2)) {
if (sort.res[j] == listAtomSyn[k]){
#if ((((listAtomSyn2)[k]) =="C") || (((listAtomSyn2)[k]) == "CA") || (((listAtomSyn2)[k]) == "O") || (((listAtomSyn2)[k]) == "N")){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matrice3PR2[1,sort.res[j]] = matrice3PR2[1,sort.res[j]] + 1
}else{
matrice3PR2[2,sort.res[j]] = matrice3PR2[2,sort.res[j]] + 1
}
}
}
}
matrice3PR2
matricetotale = matrice3PR1 + matrice3PR2
svg("figures/pheatmap_PR2_SCBB.svg",  width = 12)
pheatmap(matrice3PR2, cluster_cols = FALSE, cluster_rows = FALSE, breaks = c(-1, 10, 20, 50, 100, 150), col = c("white", "wheat", "yellow", "orange", "red"))
dev.off()
ProtPR2 = c("1hii","1hsh","1hsi","1ivp","2hpe","2hpf","2mip","3ebz","3ec0","3ecg","3s45")
list.bk = c("C","O","N","CA")
matriceBackBonePR2 <- matrix(0, nrow=length(ProtPR2), ncol=length(NbResidues))
rownames(matriceBackBonePR2) <- ProtPR2
colnames(matriceBackBonePR2) <- sort.res
matriceChaineLatPR2 <- matrix(0, nrow=length(ProtPR2), ncol=length(NbResidues))
rownames(matriceChaineLatPR2) <- ProtPR2
colnames(matriceChaineLatPR2) <- sort.res
NbAtomeinPC = c(1:length(listAtomSyn2))
names(listAtomSyn) = listAtomSyn2
for (i in 1:length(ind.PR2)) {
listAtomSyn = NULL
listAtomSyn2 = NULL
filein = ind.PR2[i]
N = read.table(paste("fileByProt3",filein,sep="/"))
listAtomSyn = (paste(as.character(N[,6]), as.character(N[,5]), sep="_"))
listAtomSyn2 = (paste(as.character(N[,3])))
for (k in 1:length(listAtomSyn)) {
for (j in 1:length(sort.res)) {
if (listAtomSyn[k] == sort.res[j]){
if (is.element(listAtomSyn2[k], list.bk)==TRUE){
matriceBackBonePR2[ProtPR2[i],sort.res[j]] = 1
}else{
matriceChaineLatPR2[ProtPR2[i],sort.res[j]] = 1
}
}
}
}
}
pheatmap(matriceBackBonePR2[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matriceChaineLatPR2[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
consvPR1.PR2 <- intersect(res.conserv.PR1, res.conserv.PR2)
length(consvPR1.PR2)
regionfile <- read.table("description_regions.csv", sep=",")
regionV = c(as.character(regionfile[,2]), as.character(regionfile[,2]))
names(regionV) <- c(paste(as.character(regionfile[,1]),"A", sep="_"),
paste(as.character(regionfile[,1]),"B", sep="_"))
mut.diff00 <- rep("no", length = length(consvPR1.PR2))
names(mut.diff00) <- consvPR1.PR2
mut.diff00[intersect(res.muT, consvPR1.PR2)] = "yes"
tmp.occ <- data.frame(consvPR1.PR2,
occ.PR1[consvPR1.PR2],
occ.PR2[consvPR1.PR2],
regionV[consvPR1.PR2],
t(matrice3PR1[,consvPR1.PR2]),
t(matrice3PR2[,consvPR1.PR2]),
mut.diff00
)
colnames(tmp.occ) <- c("residues", "PR1.Occ", "PR2.Occ", "loc",
"BB.PR1", "SC.PR1",
"BB.PR2", "SC.PR2", "mutation")
tmp.occ
consvPR1.NotinPR2 <- setdiff(res.conserv.PR1, res.conserv.PR2)
regionfile <- read.table("description_regions.csv", sep=",")
regionV = c(as.character(regionfile[,2]), as.character(regionfile[,2]))
names(regionV) <- c(paste(as.character(regionfile[,1]),"A", sep="_"),
paste(as.character(regionfile[,1]),"B", sep="_"))
mut.diff11 <- rep("no", length = length(consvPR1.NotinPR2))
names(mut.diff11) <- consvPR1.NotinPR2
mut.diff11[intersect(res.muT, consvPR1.NotinPR2)] = "yes"
tmp.occ <- data.frame(consvPR1.NotinPR2,
occ.PR1[consvPR1.NotinPR2],
occ.PR2[consvPR1.NotinPR2],
regionV[consvPR1.NotinPR2],
t(matrice3PR1[,consvPR1.NotinPR2]),
t(matrice3PR2[,consvPR1.NotinPR2]),
mut.diff11
)
colnames(tmp.occ) <- c("residues", "PR1.Occ", "PR2.Occ", "loc",
"BB.PR1", "SC.PR1",
"BB.PR2", "SC.PR2", "mutation")
tmp.occ
consvPR2.NotinPR1 <- setdiff(res.conserv.PR2, res.conserv.PR1)
mut.diff2 <- rep("no", length = length(consvPR2.NotinPR1))
names(mut.diff2) <- consvPR2.NotinPR1
mut.diff2[intersect(res.muT, consvPR2.NotinPR1)] = "yes"
tmp.occ <- data.frame(consvPR2.NotinPR1,
occ.PR1[consvPR2.NotinPR1],
occ.PR2[consvPR2.NotinPR1],
regionV[consvPR2.NotinPR1],
t(matrice3PR1[,consvPR2.NotinPR1]),
t(matrice3PR2[,consvPR2.NotinPR1]),
mut.diff2
)
colnames(tmp.occ) <- c("residues", "PR1.Occ", "PR2.Occ", "loc",
"BB.PR1", "SC.PR1",
"BB.PR2", "SC.PR2", "mutation")
tmp.occ
plot(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",], pch = 19,
xlab="nombre de structures de PR1",
ylab="nombre de structures de PR2")
text(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",],
colnames(matriceStruct), pos=3, offset=0.3, cex=0.5 )
cor(matriceStruct["NbStructinPC.PR1",], matriceStruct["NbStructinPC.PR2",])
RegionPacking = c("dimer1A","R1A","fulcrumA","catalyticA","R2A","elbowA","flapsA","cantileverA","R3A","wallA","R4A","alpha-helixA","dimer2A","dimer1B","R1B","fulcrumB","catalyticB","R2B","elbowB","flapsB","cantileverB","R3B","wallB","R4B","alpha-helixB","dimer2B")
ResidueTotaux = c("1_A","2_A","3_A","4_A","5_A","6_A","7_A","8_A","9_A","10_A","11_A","12_A","13_A","14_A","15_A","16_A","17_A","18_A","19_A","20_A","21_A","22_A","23_A","24_A","25_A","26_A","27_A","28_A","29_A","30_A","31_A","32_A","33_A","34_A","35_A","36_A","37_A","38_A","39_A","40_A","41_A","42_A","43_A","44_A","45_A","46_A","47_A", "48_A", "49_A", "50_A", "51_A", "52_A", "53_A", "54_A", "55_A", "56_A", "57_A", "58_A", "59_A", "60_A", "61_A","62_A", "63_A","64_A", "65_A", "66_A", "67_A", "68_A","69_A", "70_A", "71_A", "72_A", "73_A", "74_A","75_A","76_A","77_A", "78_A", "79_A", "80_A", "81_A", "82_A", "83_A","84_A","85_A","86_A","87_A", "88_A", "89_A", "90_A", "91_A", "92_A", "93_A", "94_A", "95_A","96_A", "97_A", "98_A", "99_A", "1_B", "2_B", "3_B", "4_B","5_B","6_B","7_B","8_B","9_B","10_B", "11_B", "12_B", "13_B", "14_B","15_B", "16_B", "17_B", "18_B", "19_B","20_B","21_B","22_B","23_B","24_B","25_B","26_B","27_B","28_B", "29_B", "30_B" ,"31_B","32_B","33_B", "34_B", "35_B" ,"36_B", "37_B", "38_B", "39_B" ,"40_B", "41_B", "42_B", "43_B", "44_B", "45_B", "46_B", "47_B", "48_B", "49_B","50_B", "51_B", "52_B", "53_B", "54_B", "55_B", "56_B" ,"57_B", "58_B", "59_B", "60_B" ,"61_B", "62_B", "63_B","64_B", "65_B","66_B", "67_B" ,"68_B", "69_B", "70_B", "71_B","72_B", "73_B", "74_B","75_B", "76_B","77_B", "78_B", "79_B", "80_B", "81_B", "82_B", "83_B","84_B","85_B","86_B", "87_B", "88_B","89_B","90_B", "91_B", "92_B","93_B", "94_B", "95_B", "96_B","97_B", "98_B", "99_B")
regionfile <- read.table("description_regions.csv", sep=",")
regionV = c(paste(as.character(regionfile[,2]),"A",sep=""),
paste(as.character(regionfile[,2]),"B",sep=""))
listAtomSyn = NULL
matrice3PR <- matrix(0,nrow=length(Proteases),ncol=length(RegionPacking))
rownames(matrice3PR) <- Proteases
colnames(matrice3PR) <- RegionPacking
for(region in colnames(matrice3PR)){
resSel <- intersect(colnames(matrice), ResidueTotaux[which(regionV==region)])
if(length(resSel) != 0){
for(prot in rownames(matrice3PR)){
matrice3PR[prot, region] <- sum(matrice[prot, resSel])
}
}
}
pheatmap(matrice3PR, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(c("white","yellow","red"))(length(seq(0,12,by=0.5))), br=seq(0,12,by=0.5))
RegionPacking = c("dimer1A","R1A","fulcrumA","catalyticA","R2A","elbowA","flapsA","cantileverA","R3A","wallA","R4A","alpha-helixA","dimer2A","dimer1B","R1B","fulcrumB","catalyticB","R2B","elbowB","flapsB","cantileverB","R3B","wallB","R4B","alpha-helixB","dimer2B")
ResidueTotaux = c("1_A","2_A","3_A","4_A","5_A","6_A","7_A","8_A","9_A","10_A","11_A","12_A","13_A","14_A","15_A","16_A","17_A","18_A","19_A","20_A","21_A","22_A","23_A","24_A","25_A","26_A","27_A","28_A","29_A","30_A","31_A","32_A","33_A","34_A","35_A","36_A","37_A","38_A","39_A","40_A","41_A","42_A","43_A","44_A","45_A","46_A","47_A", "48_A", "49_A", "50_A", "51_A", "52_A", "53_A", "54_A", "55_A", "56_A", "57_A", "58_A", "59_A", "60_A", "61_A","62_A", "63_A","64_A", "65_A", "66_A", "67_A", "68_A","69_A", "70_A", "71_A", "72_A", "73_A", "74_A","75_A","76_A","77_A", "78_A", "79_A", "80_A", "81_A", "82_A", "83_A","84_A","85_A","86_A","87_A", "88_A", "89_A", "90_A", "91_A", "92_A", "93_A", "94_A", "95_A","96_A", "97_A", "98_A", "99_A", "1_B", "2_B", "3_B", "4_B","5_B","6_B","7_B","8_B","9_B","10_B", "11_B", "12_B", "13_B", "14_B","15_B", "16_B", "17_B", "18_B", "19_B","20_B","21_B","22_B","23_B","24_B","25_B","26_B","27_B","28_B", "29_B", "30_B" ,"31_B","32_B","33_B", "34_B", "35_B" ,"36_B", "37_B", "38_B", "39_B" ,"40_B", "41_B", "42_B", "43_B", "44_B", "45_B", "46_B", "47_B", "48_B", "49_B","50_B", "51_B", "52_B", "53_B", "54_B", "55_B", "56_B" ,"57_B", "58_B", "59_B", "60_B" ,"61_B", "62_B", "63_B","64_B", "65_B","66_B", "67_B" ,"68_B", "69_B", "70_B", "71_B","72_B", "73_B", "74_B","75_B", "76_B","77_B", "78_B", "79_B", "80_B", "81_B", "82_B", "83_B","84_B","85_B","86_B", "87_B", "88_B","89_B","90_B", "91_B", "92_B","93_B", "94_B", "95_B", "96_B","97_B", "98_B", "99_B")
regionfile <- read.table("description_regions.csv", sep=",")
regionV = c(paste(as.character(regionfile[,2]),"A",sep=""),
paste(as.character(regionfile[,2]),"B",sep=""))
listAtomSyn = NULL
matrice3PR1 <- matrix(0,nrow=length(ProtPR1),ncol=length(RegionPacking))
rownames(matrice3PR1) <- ProtPR1
colnames(matrice3PR1) <- RegionPacking
for(region in colnames(matrice3PR1)){
resSel <- intersect(colnames(matrice), ResidueTotaux[which(regionV==region)])
if(length(resSel) != 0){
for(prot in rownames(matrice3PR1)){
matrice3PR1[prot, region] <- sum(matrice[prot, resSel])
}
}
}
pheatmap(matrice3PR1, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(c("white","yellow","red"))(length(seq(0,12,by=0.5))), br=seq(0,12,by=0.5))
RegionPacking = c("dimer1A","R1A","fulcrumA","catalyticA","R2A","elbowA","flapsA","cantileverA","R3A","wallA","R4A","alpha-helixA","dimer2A","dimer1B","R1B","fulcrumB","catalyticB","R2B","elbowB","flapsB","cantileverB","R3B","wallB","R4B","alpha-helixB","dimer2B")
ResidueTotaux = c("1_A","2_A","3_A","4_A","5_A","6_A","7_A","8_A","9_A","10_A","11_A","12_A","13_A","14_A","15_A","16_A","17_A","18_A","19_A","20_A","21_A","22_A","23_A","24_A","25_A","26_A","27_A","28_A","29_A","30_A","31_A","32_A","33_A","34_A","35_A","36_A","37_A","38_A","39_A","40_A","41_A","42_A","43_A","44_A","45_A","46_A","47_A", "48_A", "49_A", "50_A", "51_A", "52_A", "53_A", "54_A", "55_A", "56_A", "57_A", "58_A", "59_A", "60_A", "61_A","62_A", "63_A","64_A", "65_A", "66_A", "67_A", "68_A","69_A", "70_A", "71_A", "72_A", "73_A", "74_A","75_A","76_A","77_A", "78_A", "79_A", "80_A", "81_A", "82_A", "83_A","84_A","85_A","86_A","87_A", "88_A", "89_A", "90_A", "91_A", "92_A", "93_A", "94_A", "95_A","96_A", "97_A", "98_A", "99_A", "1_B", "2_B", "3_B", "4_B","5_B","6_B","7_B","8_B","9_B","10_B", "11_B", "12_B", "13_B", "14_B","15_B", "16_B", "17_B", "18_B", "19_B","20_B","21_B","22_B","23_B","24_B","25_B","26_B","27_B","28_B", "29_B", "30_B" ,"31_B","32_B","33_B", "34_B", "35_B" ,"36_B", "37_B", "38_B", "39_B" ,"40_B", "41_B", "42_B", "43_B", "44_B", "45_B", "46_B", "47_B", "48_B", "49_B","50_B", "51_B", "52_B", "53_B", "54_B", "55_B", "56_B" ,"57_B", "58_B", "59_B", "60_B" ,"61_B", "62_B", "63_B","64_B", "65_B","66_B", "67_B" ,"68_B", "69_B", "70_B", "71_B","72_B", "73_B", "74_B","75_B", "76_B","77_B", "78_B", "79_B", "80_B", "81_B", "82_B", "83_B","84_B","85_B","86_B", "87_B", "88_B","89_B","90_B", "91_B", "92_B","93_B", "94_B", "95_B", "96_B","97_B", "98_B", "99_B")
regionfile <- read.table("description_regions.csv", sep=",")
regionV = c(paste(as.character(regionfile[,2]),"A",sep=""),
paste(as.character(regionfile[,2]),"B",sep=""))
listAtomSyn = NULL
matrice3PR2 <- matrix(0,nrow=length(ProtPR2),ncol=length(RegionPacking))
rownames(matrice3PR2) <- ProtPR2
colnames(matrice3PR2) <- RegionPacking
for(region in colnames(matrice3PR2)){
resSel <- intersect(colnames(matrice), ResidueTotaux[which(regionV==region)])
if(length(resSel) != 0){
for(prot in rownames(matrice3PR2)){
matrice3PR2[prot, region] <- sum(matrice[prot, resSel])
}
}
}
pheatmap(matrice3PR2, cluster_rows = FALSE, cluster_cols = FALSE, color = colorRampPalette(c("white","yellow","red"))(length(seq(0,12,by=0.5))), br=seq(0,12,by=0.5))
descLig <- read.table("matrice_descripteurs_ligand.csv", header=T, sep=",")
rownames(descLig) <- as.character(descLig[,"ID"])
dim(descLig)
descLig2 <- read.table("results_all_ligands_fafdrug_ChoixDesc.csv", header=T, sep=",")
rownames(descLig2) <- as.character(descLig2[,"ID"])
dim(descLig2)
mat.DescLig <- data.frame(descLig[,-(1:2)], descLig2[rownames(descLig),-(1:4)])
dim(mat.DescLig)
var.sup <- findCorrelation(cor(mat.DescLig), cutoff = 0.9)
mat.DescLigNoCor <- mat.DescLig[, -var.sup]
dim(mat.DescLigNoCor )
hc.res <- hclust(dist(scale(mat.DescLigNoCor,T,T)), method = "ward.D2")
plot(hc.res, hang=-1)
abline(h=10)
groupe = cutree(hc.res, h=10)
