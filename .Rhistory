knitr::opts_chunk$set(echo = TRUE)
listFile = dir("fileByProt3/")
listFile
getwd()
listdir()
dir()
listFile = dir("fileByProt3/")
filein = listFile[1]
M = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = unique(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
listAtomSyn = listAtom
listAtomSyn
filein = listFile[1]
M = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = unique(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
listAtomSyn = listAtom
listAtomSyn
v1 =(1:26)
v2 =(1:160)
for (i in v1){
for (j in v2) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = unique(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
listAtomSyn = unique(c(listAtom,listAtomSyn))
}
}
listAtomSyn[160] = ("Protease")
listAtomSyn
listAtom
v3 = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3","Nb de structure dans lequel le résidu est implique","Nb de structure PR1 dans lequel le résidu est implique","Nb de structure PR2 dans lequel le résidu est implique")
matrice <- matrix(c(rep(0,(length(listAtomSyn)))*(length(v3))), nrow=length(v3), ncol=length(listAtomSyn))
rownames(matrice) <- c(v3)
colnames(matrice) <- c(listAtomSyn)
matrice
filein = listFile[2]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- c(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
Atome
for (i in 1:length(v1)) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- unique(c(paste(as.character(M[,6]), as.character(M[,5]), sep="_")))
for (j in 1:length(v2)) {
for (y in 1:length(Atome)) {
if ((listAtomSyn[j]) == (Atome[y])){
matrice[i,j] = 1
}
}
}
}
residu = function(n){
matrice
}
matrice
pheatmap::pheatmap(matrice)
help(pheatmatp)
package("pheatmap")
library("pheatmap")
library(pheatmatp)
library(pheatmatp)
library(pheatmatp)
library(pheatmap)
help(pheatmatp)
help(pheatmap)
pheatmap(matrice, cluster_rows = FLASE, cluster_cols = FALSE)
pheatmap(matrice, cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap(matrice, cluster_rows = FALSE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
matrice[1,]
for (i in 1:length(v3)){
if (matrice[i,] == "3s45"|| matrice[i,] == "1hii"|| matrice[i,] == "1hsh"|| matrice[i,] == "1hsi"|| matrice[i,] == "1ivp"|| matrice[i,] == "3s45"|| matrice[i,] == "2hpe"|| matrice[i,] == "2hpf"|| matrice[i,] == "2mip"|| matrice[i,] == "3ebz"|| matrice[i,] == "3ec0"|| matrice[i,] == "3ecg"){
matrice[i,160] = 2
}
if (matrice[i,] == "1hhp" || matrice[i,] == "1hih" || matrice[i,] == "1hiv" || matrice[i,] == "1hpv" || matrice[i,] == "1sdt" || matrice[i,] == "2hb3" || matrice[i,] == "2hb4" || matrice[i,] == "2ien" || matrice[i,] == "2nph" || matrice[i,] == "3phv" || matrice[i,] == "2z4o" || matrice[i,] == "3ekv" || matrice[i,] == "3nu3" || matrice[i,] == "4hla" || matrice[i,] == "4ll3" || matrice[i,] == "2pc0"){
matrice[i,160] = 1
}
}
matrice
for (i in length(listAtomSyn)){
y = 0
for (j in length(v3)) {
ma = matrice[j,i]
if (ma == 1){
y = y+1
}
ma = 0
}
matrice[length(v3)-2,i] = y
}
install.packages("ktableExtra")
library(kableExtra)
install.packages("kableExtra")
dim(matrice)
rownames(matrice)
matrice[27:29,]
listFile = dir("fileByProt3/")
v1 =(1:26)
v2 =(1:160)
for (i in v1){
for (j in v2) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
listAtom = unique(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
listAtomSyn = unique(c(listAtom,listAtomSyn))
}
}
listAtomSyn[160] = ("Protease")
listAtomSyn
listAtom
v3 = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3","Nb de structure dans lequel le résidu est implique","Nb de structure PR1 dans lequel le résidu est implique","Nb de structure PR2 dans lequel le résidu est implique")
matrice <- matrix(c(rep(0,(length(listAtomSyn)))*(length(v3))), nrow=length(v3), ncol=length(listAtomSyn))
rownames(matrice) <- c(v3)
colnames(matrice) <- c(listAtomSyn)
#matrice
filein = listFile[2]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- c(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
Atome
for (i in 1:length(v1)) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- unique(c(paste(as.character(M[,6]), as.character(M[,5]), sep="_")))
for (j in 1:length(v2)) {
for (y in 1:length(Atome)) {
if ((listAtomSyn[j]) == (Atome[y])){
matrice[i,j] = 1
}
}
}
}
#residu = function(n){
#matrice
library(pheatmap)
?pheatmap
pheatmap::pheatmap(matrice)
pheatmap(matrice, cluster_rows = FALSE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
v3 = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3","* NbStructinPC", "NbStructinPC.PR1", "NbStructinPC.PR2Nb")
matrice <- matrix(c(rep(0,(length(listAtomSyn)))*(length(v3))), nrow=length(v3), ncol=length(listAtomSyn))
rownames(matrice) <- c(v3)
colnames(matrice) <- c(listAtomSyn)
#matrice
filein = listFile[2]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- c(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
Atome
for (i in 1:length(v1)) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- unique(c(paste(as.character(M[,6]), as.character(M[,5]), sep="_")))
for (j in 1:length(v2)) {
for (y in 1:length(Atome)) {
if ((listAtomSyn[j]) == (Atome[y])){
matrice[i,j] = 1
}
}
}
}
#residu = function(n){
#matrice
library(pheatmap)
?pheatmap
pheatmap::pheatmap(matrice)
pheatmap(matrice, cluster_rows = FALSE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matrice, cluster_rows = FALSE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
dir("fileByProt3/")
mm = read.table("fileByProt3/1sdt_packCryst.pdb")
mm[,5]
paste(mm[,6], mm[,5],sep="_")
unique(paste(mm[,6], mm[,5],sep="_"))
pheatmap(matrice, cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matrice[-27-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matrice[-27-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matrice[-27-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
pheatmap(matrice[-27-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
matrice[-27-29,]
rownames(matrice[-27-29,])
pheatmap(matrice[-27:-29,], cluster_rows = TRUE, cluster_cols = FALSE, br=-1:1, col=c("white", "red"))
length(unique(paste(mm[,6], mm[,5],sep="_")))
matrice[27,]
for (i in 1:length(v3)){
if (matrice[i,] == "3s45"|| matrice[i,] == "1hii"|| matrice[i,] == "1hsh"|| matrice[i,] == "1hsi"|| matrice[i,] == "1ivp"|| matrice[i,] == "3s45"|| matrice[i,] == "2hpe"|| matrice[i,] == "2hpf"|| matrice[i,] == "2mip"|| matrice[i,] == "3ebz"|| matrice[i,] == "3ec0"|| matrice[i,] == "3ecg"){
matrice[i,160] = 2
}
if (matrice[i,] == "1hhp" || matrice[i,] == "1hih" || matrice[i,] == "1hiv" || matrice[i,] == "1hpv" || matrice[i,] == "1sdt" || matrice[i,] == "2hb3" || matrice[i,] == "2hb4" || matrice[i,] == "2ien" || matrice[i,] == "2nph" || matrice[i,] == "3phv" || matrice[i,] == "2z4o" || matrice[i,] == "3ekv" || matrice[i,] == "3nu3" || matrice[i,] == "4hla" || matrice[i,] == "4ll3" || matrice[i,] == "2pc0"){
matrice[i,160] = 1
}
}
matrice
for (i in length(listAtomSyn)){
y = 0
for (j in length(v3)) {
ma = matrice[j,i]
if (ma == 1){
y = y+1
}
ma = 0
}
matrice[length(v3)-2,i] = y
}
matrice[27,]
rownames(matrice)
NbStructinPC = apply(matrice[1:26],2,sum)
NbStructinPC = apply(matrice[1:26,],2,sum)
NbStructinPC
sort(NbStructinPC)
colnames(matrice)
matrice[,"Protease"]
sort(NbStructinPC)
dim(matrice[1:26])
rownames(NbStructinPC/26)
NbStructinPC/26
which(NbStructinPC/26 > 0.8)
names(which(NbStructinPC/26 > 0.8))
matrice <- matrix(c(rep(0,(length(listAtomSyn)))*(length(v3))), nrow=length(v3), ncol=length(listAtomSyn))
matrice
#vous pouvez simplifier avec la commande suivante :
matrice <- matrix(0, nrow=length(v3), ncol=length(listAtomSyn))
v1
matrice2 <- matrix(0, nrow=length(v3), ncol=length(listAtomSyn))
rownames(matrice2) <- v3
colnames(matrice2) <- listAtomSyn
filein
pdbCode <- unlist(strsplit(filein,"_"))[1]
pdbCode
matrice2[pdbCode]
matrice2[pdbCode,]
Atome
for (i in 1:length(v1)) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
residue <- unique(c(paste(as.character(M[,6]), as.character(M[,5]), sep="_")))
pdbCode <- unlist(strsplit(filein,"_"))[1]
matrice2[pdbCode, residue] = 1
}
matrice2
apply(matrice2, 2, sum)
v3 = c("1hhp","1hih","1hii","1hiv","1hpv","1hsh","1hsi","1ivp","1sdt","2hb3","2hb4","2hpe","2hpf","2ien","2mip","2nph","2z4o","3ebz","3ec0","3ecg","3ekv","3nu3","3phv","3s45","4hla","4ll3","* NbStructinPC", "NbStructinPC.PR1", "NbStructinPC.PR2Nb")
matrice <- matrix(c(rep(0,(length(listAtomSyn)))*(length(v3))), nrow=length(v3), ncol=length(listAtomSyn))
#vous pouvez simplifier avec la commande suivante :
matrice <- matrix(0, nrow=length(v3), ncol=length(listAtomSyn))
rownames(matrice) <- c(v3)
colnames(matrice) <- c(listAtomSyn)
#matrice
#dans les lignes ci-dessus les fonctions c ne sont pas nécessaires
filein = listFile[2]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- c(paste(as.character(M[,6]), as.character(M[,5]), sep="_"))
Atome
for (i in 1:length(v1)) {
filein = listFile[i]
M = read.table(paste("fileByProt3",filein,sep="/"))
Atome <- unique(c(paste(as.character(M[,6]), as.character(M[,5]), sep="_")))
for (j in 1:length(v2)) {
for (y in 1:length(Atome)) {
if ((listAtomSyn[j]) == (Atome[y])){
matrice[i,j] = 1
}
}
}
}
NbStructinPC = apply(matrice[1:26,],2,sum)
sort(NbStructinPC)
NbStructinPC2 = apply(matrice2[1:26,],2,sum)
NbStructinPC2 - NbStructinPC
sum(NbStructinPC2 - NbStructinPC)
